$vertex #version 330 core

uniform vec2 chunk_pos;
layout(std140) uniform GlobalMatrices
{
  mat4 view;
  mat4 proj;
};

in vec2 a_position;
in vec2 a_uv0;
in vec2 a_uv1;
in vec3 a_normal;

out vec2 frag_uv0;
out vec2 frag_uv1;
out vec3 frag_normal;

void main()
{
  frag_uv0 = a_uv0;
  frag_uv1 = a_uv1;
  frag_normal = a_normal;
  gl_Position = proj * view * vec4(a_position + chunk_pos, 0, 1);
}

$fragment #version 330 core

uniform sampler2D tex;
uniform sampler2D mask;

uniform vec3 lightDir = vec3(0.0, 0.0, 1.0);

in vec2 frag_uv0;
in vec2 frag_uv1;
in vec3 frag_normal;
in vec4 frag_color;

out vec4 fragment_color;

void main()
{
  vec3 color = texture(tex, frag_uv0).rgb;
  float alpha = texture(mask, frag_uv1).r;

  float shadow_factor = max(0.0, dot(frag_normal, normalize(lightDir)));

  color = color * mix(0.2, 1.0, shadow_factor);

  fragment_color = vec4(color, alpha);
}